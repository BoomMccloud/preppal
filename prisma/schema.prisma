// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
      // Relation: A user can have many interview sessions
    interviews Interview[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// The core model for an interview session
model Interview {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // The actual start and end times of the live session
  startedAt DateTime?
  endedAt   DateTime?

  status InterviewStatus @default(PENDING)

  // Relation: Each interview belongs to exactly one user
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relation: Each interview can have one feedback report (optional)
  feedback InterviewFeedback?

  // Relation: Each interview is composed of many transcript entries
  transcript TranscriptEntry[]
}

// The results/feedback from a completed interview
model InterviewFeedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // A high-level summary generated by the AI
  summary String @db.Text

  // Specific, actionable feedback points
  strengths           String @db.Text // Could be a markdown list
  areasForImprovement String @db.Text // Could be a markdown list

  // Example quantitative metrics
  clarityScore Int? // Score from 1-10
  pacingScore  Int? // Score from 1-10

  // Relation: This feedback is for exactly one interview
  interviewId String    @unique
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

// A single entry in the interview transcript (one person speaking)
model TranscriptEntry {
  id        String   @id @default(cuid())
  timestamp DateTime // When this part of the conversation happened

  speaker SpeakerRole // Who said this? The USER or the AI?
  content String      @db.Text    // The text content of what was said

  // Relation: This entry is part of exactly one interview
  interviewId String
  interview   Interview @relation(fields: [interviewId], references: [id], onDelete: Cascade)

  @@index([interviewId, timestamp]) // Index for fast lookup of a specific interview's transcript
}

// Enum for the status of an interview session
enum InterviewStatus {
  PENDING     // Scheduled but not started
  IN_PROGRESS // Actively happening
  COMPLETED   // Finished successfully
  ERROR       // An error occurred
}


// Enum to identify who is speaking in the transcript
enum SpeakerRole {
  USER
  AI
}